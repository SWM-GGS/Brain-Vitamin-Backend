# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a package using Gradle and then publish it to GitHub packages when a release is created
# For more information see: https://github.com/actions/setup-java/blob/main/docs/advanced-usage.md#Publishing-using-gradle

name: Gradle Package

# main 브랜치에 push, pull request가 일어날 때마다 실행되도록 트리거 설정
on:
  push:
    branches: [ "develop" ]
#  pull_request:
#    branches: [ "develop" ]

# 실제로 수행될 작업을 정의
jobs:
  build:
    # ubuntu 최신 버전에서 script 실행
    runs-on: ubuntu-latest
    # 코드의 내용을 이 파일을 실행하여 action을 수행하는 주체(Github Actions에서 사용하는 VM)가 읽을 수 있도록 허용
    permissions:
      contents: read
      packages: write

    steps:

      # 지정한 repo에서 코드를 workflow 환경으로 가져오도록 하는 github action
      - name: Checkout Repository
        uses: actions/checkout@v3

      # open JDK 17 버전 환경 세팅
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'adopt'
          # server-id: github # Value of the distributionManagement/repository/id field of the pom.xml
          # settings-path: ${{ github.workspace }} # location for the settings.xml file

      # Github Secrets로부터 데이터를 받아서, 워크 플로우에 파일 생성
      - name: Make application.yml
        run: |
          cd ./src/main/resources
          touch ./application.yml
          echo "${{ secrets.BASE_YML }}" > ./application.yml
          touch ./application-prod.yml
          echo "${{ secrets.PROD_YML }}" > ./application-prod.yml
          ls
        shell: bash

      # gradle을 통해 빌드
      - name: Build with Gradle
        run: |
          chmod +x ./gradlew
          ./gradlew clean build -x test
        # uses: gradle/gradle-build-action@bd5760595778326ba7f1441bcf7e88b49de61a25 # v2.6.0
        # with:
        #   arguments: build

      - name: Docker build & push to dockerhub repo (prod)
        run: |
          docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
          docker build -f Dockerfile-prod -t ${{ secrets.DOCKER_REPO }}/brain-vitamin .
          docker tag ${{ secrets.DOCKER_REPO }}/brain-vitamin leetaegyu/brain-vitamin:prod
          docker push leetaegyu/brain-vitamin:prod

      # appleboy/ssh-action@master 액션을 사용하여 지정한 서버에 ssh로 접속, script 실행
      # script의 내용 -> 도커의 기존 프로세스 제거, docker repo로부터 최신에 push한 내용을 pull 받아 실행하는 것
      # 실행 시 docker-compose를 사용
      - name: Deploy to server
        uses: appleboy/ssh-action@master
        id: deploy
        with:
          host: ${{ secrets.HOST }}
          username: ubuntu
          key: ${{ secrets.KEY }}
          envs: GITHUB_SHA
          script: |
            cd /home/ubuntu/Brain-Vitamin-Backend/
            sudo docker rm -f $(docker ps -qa)
            sudo docker pull leetaegyu/brain-vitamin:prod
            docker-compose -f docker-compose-prod.yml up -d
            docker image prune -f
        
